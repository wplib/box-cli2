#!/usr/bin/env bash
#
# box - CLI for WPLib Box - https://github.com/wplib/wplib-box
# 
# Initialize vars
export BOXCLI_INCLUDE_DIR=""
export BOXCLI_CLAUSES=()

#
# Set a variable to allow determining how deeply nested a command is.
# IOW, A `box` commmand calls a more fundamental `box` command, etc.
# Most common nested calls are calling `box util` commands
# First time through BOXCLI_NESTING_DEPTH will equal 1.
#
export BOXCLI_NESTING_DEPTH=${BOXCLI_NESTING_DEPTH:=0}
BOXCLI_NESTING_DEPTH=$(( BOXCLI_NESTING_DEPTH + 1 ))

#Find the platform. This could be much better
if [ "$(uname)" = "Darwin" ] ; then
    export BOXCLI_PLATFORM='macOS'
else
    export BOXCLI_PLATFORM='linux'
fi

#Find the ROOR_DIR for the BOX CLI source
if [ "${BOXCLI_PLATFORM}" = "macOS" ] ; then
    #This only works on Mac OSX
    export BOXCLI_ROOT_DIR=$(dirname $(readlink "$0"))
else
    #This works on Ubuntu if realpath has been installed
    export BOXCLI_ROOT_DIR=$(dirname $(realpath "$0"))
fi

#
# Create a temp directory for error handling and more
#
#   BOXCLI_PERSISTENT_DIR
#       This is used for caching and does not change between box sessions.
#
#   BOXCLI_TEMP_DIR
#       Created for box session as subdirectory of $BOXCLI_PERSISTENT_DIR.
#       Used no matter the box call nesting level. This is needed for
#       passing errors up but deleted at end of box session.
#
#   BOXCLI_LOCAL_TMP
#       Created for this one box call only as subdirectory of $BOXCLI_TEMP_DIR.
#
if (( 1 == ${BOXCLI_NESTING_DEPTH} )) ; then
    boxcliTmpDir="${TMPDIR:=/tmp/}"
    export BOXCLI_PERSISTENT_DIR="${boxcliTmpDir%/}/boxcli"
    mkdir -p "${BOXCLI_PERSISTENT_DIR}"
    export BOXCLI_TEMP_DIR="$(mktemp -d "${BOXCLI_PERSISTENT_DIR}/XXXXX")"
    mkdir -p "${BOXCLI_TEMP_DIR}"
    function __boxcliCleanupBox {
        rm -rf "${BOXCLI_TEMP_DIR}"
        trap - INT QUIT TERM
    }
    #
    # TODO: Need to verify these are correct to trap
    #
    trap __boxcliCleanupBox INT QUIT TERM
fi
BOXCLI_LOCAL_TMP="$(mktemp -d "${BOXCLI_TEMP_DIR}/@XXXX")"
mkdir -p "${BOXCLI_LOCAL_TMP}"
echo "$*" > ${BOXCLI_LOCAL_TMP}/command


#
# Load error handling system
#
source "${BOXCLI_ROOT_DIR}/inc/errors.sh"

# Load BOXCLI_* functions and constants
source "${BOXCLI_ROOT_DIR}/inc/const.sh" "${BOXCLI_ROOT_DIR}"
mkdir -p "${BOXCLI_TEMP_DIR}"

source "${BOXCLI_ROOT_DIR}/inc/funcs.sh"
__boxProcessCmdLine "$@"

# Initialize these
isQuiet
isNoPrompt
isDryRun
isComposer
isJSON

# Run reset script to ensure known bash environment
source "${BOXCLI_INCLUDE_DIR}/reset.sh"

# Grab 1st parameter as command, default to "help"
__command="${1:-}"
__args=()
__argNames=()
__argNum=0
__path="${BOXCLI_ROOT_DIR}"
if (( 0 < "${#BOXCLI_CLAUSES[@]}" )) ; then
    for clause in "${BOXCLI_CLAUSES[@]}" ; do
        __testdir="${__path}/cmd"
        if ! [ -d "${__testdir}" ] ; then
            # If we don't have a command but we have an args
            __testdir="${__path}/args"
            if ! [ -d "${__testdir}" ] ; then
                stdErr "Arguments not allowed."
                break
            elif (( 0 == "${#__args[@]}" )) ; then
                for arg in $__testdir/* ; do
                    # example $arg: (A) "/.../3-abc=123" or (B) "/.../2-xyz"
                    __argName=$(basename "${arg}")
                    __order="${__argName:0:1}"
                    __argName="${__argName:2}"
                    __value="${__argName#*=}"   # Get after "="
                    __name="${__argName%=*}"    # Get upto "="
                    [ "${__argName}" = "${__name}" ] && __value=""  # clear out default if (B).
                    __args+=($__value)
                    __argNames+=($__name)
                done
            fi
            __args[$__argNum]="${clause}"
            __argNum=$((__argNum+1))
            if (( __argNum > "${#__args[@]}" )) ; then
                stdErr "Too many arguments."
                break
            fi
            continue
        fi
        __filepath=""
        __testdir="${__path}/cmd/${clause}"
        if [ -d "${__testdir}" ] ; then
            __path="${__testdir}"
            __filepath="${__testdir}/${clause}.sh"
            shift # remove command name from "$@"
            continue
        fi
        for alias in $__path/cmd/* ; do
           __testdir="${alias}/alias/${clause}"
            if [ -f "${__testdir}" ] ; then
                segment=$(basename "${alias}")
                __path="${__path}/cmd/${segment}"
                __filepath="${__path}/cmd/${segment}/${segment}.sh"
                __valid=1
                shift # remove command name from "$@"i
                break
            fi
        done
    done

    if [ -z "${__filepath}" ] ; then
        IFS=' '
        stdErr "'$*' not a valid box command."
        exit
    fi

    #printf '%s\n' "${__argNames[@]}"
    #printf '%s\n' "${__args[@]}"

    BOXCLI_PATH="${__path}"
    BOXCLI_SCRIPT="${__filepath}"
    BOXCLI_ARGCOUNT=("${#__args[@]}")

    if (( 0 == "${#__args[@]}" )) ; then
        BOXCLI_ARGS=()
    else
        BOXCLI_ARGS=("${__args[@]}")
    fi
    #
    # Save switches so they can be restored.
    # They should not propagate up.
    # They are saved mostly for isQuiet to stop "Done" from being output
    #
    saveGlobalSwitches
    if (( 0 == "${#__argNames[@]}" )) ; then
        BOXCLI_ARGNAMES=()
        source "${__filepath}"
    else
        BOXCLI_ARGNAMES=("${__argNames[@]}")
        source "${__filepath}" "$@"
    fi

    if (( 1 == $BOXCLI_NESTING_DEPTH )) ; then
        rm -rf "${BOXCLI_TEMP_DIR}"
        statusMsg "Done."
    fi
    #
    # Changes in switches should not propagate up
    #
    restoreGlobalSwitches
fi

